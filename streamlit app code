import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
import streamlit as st
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM

# Set the date range
start = '2010-01-01'
end = '2024-01-01'

st.title('Stock Trend Prediction')

user_input = st.text_input('Enter Stock Ticker', 'AAPL')
df = yf.download(user_input, start=start, end=end)

# Display the dataframe
st.header('Stock Data')
if not df.empty:
    st.write(df.tail())
else:
    st.write("No data available for the selected stock ticker.")

df = df.reset_index()
df = df.drop(['Date', 'Adj Close'], axis=1)

# Display closing price plot
fig, ax = plt.subplots(figsize=(12,6))
ax.plot(df['Close'], label='Closing Price')
ax.set_title('Closing Price Over Time')
ax.set_xlabel('Date')
ax.set_ylabel('Price')
ax.legend()
st.pyplot(fig)

# Moving Averages
ma100 = df['Close'].rolling(100).mean()
ma200 = df['Close'].rolling(200).mean()

fig, ax = plt.subplots(figsize=(12,6))
ax.plot(df['Close'], label='Closing Price')
ax.plot(ma100, 'r', label='100-Day Moving Average (MA100)')
ax.plot(ma200, 'g', label='200-Day Moving Average (MA200)')
ax.set_title('Moving Averages')
ax.set_xlabel('Date')
ax.set_ylabel('Price')
ax.legend()
st.pyplot(fig)

# Prepare data for training
data_training = pd.DataFrame(df['Close'][0:int(len(df)*0.70)])
data_testing = pd.DataFrame(df['Close'][int(len(df)*0.70):int(len(df))])

# Display training and testing data shapes
st.header('Training and Testing Data Shapes')
st.write(f"Training data shape: {data_training.shape}")
st.write(f"Testing data shape: {data_testing.shape}")

# Data Preprocessing
scaler = MinMaxScaler(feature_range=(0,1))
data_training_array = scaler.fit_transform(data_training)

x_train = []
y_train = []

for i in range(100, data_training_array.shape[0]):
    x_train.append(data_training_array[i-100:i])
    y_train.append(data_training_array[i, 0])

x_train, y_train = np.array(x_train), np.array(y_train)

model = Sequential()
model.add(LSTM(units=50, activation='relu', return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=60, activation='relu', return_sequences=True))
model.add(Dropout(0.3))
model.add(LSTM(units=80, activation='relu', return_sequences=True))
model.add(Dropout(0.4))
model.add(LSTM(units=120, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, epochs=50)

model.save('keras_stock.h5')

# Prepare input data for predictions
past_100_days = data_training.tail(100)
final_df = pd.concat([past_100_days, data_testing], ignore_index=True)

input_data = scaler.transform(final_df)

x_test = []
y_test = []

for i in range(100, input_data.shape[0]):
    x_test.append(input_data[i-100:i])
    y_test.append(input_data[i,0])

x_test, y_test = np.array(x_test), np.array(y_test)

# Making Predictions
y_predicted = model.predict(x_test)

scale_factor = 1/0.00646057
y_predicted = y_predicted * scale_factor
y_test = y_test * scale_factor

# Display predicted vs original prices
fig, ax = plt.subplots(figsize=(12,6))
ax.plot(y_test, 'b', label='Original Price')
ax.plot(y_predicted, 'r', label='Predicted Price')
ax.set_title('Price Prediction vs Original Price')
ax.set_xlabel('Time')
ax.set_ylabel('Price')
ax.legend()
st.pyplot(fig)
